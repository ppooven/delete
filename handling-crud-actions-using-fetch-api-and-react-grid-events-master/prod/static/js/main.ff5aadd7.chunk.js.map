{"version":3,"sources":["orderService.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["baseUrl","App","useState","data","setData","refreshGrid","fetch","then","res","json","useEffect","style","margin","marginTop","dataSource","allowPaging","pageSettings","pageSize","editSettings","allowEditing","allowAdding","allowDeleting","toolbar","dataSourceChanged","state","primaryKey","order","action","console","log","method","headers","body","JSON","stringify","value","OrderID","updateOrder","requestType","field","headerText","textAlign","width","isPrimaryKey","format","type","services","Page","Edit","Toolbar","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RACMA,EAAU,4B,UCmEDC,EArDO,WACpB,IAD0B,EAIFC,qBAJE,mBAInBC,EAJmB,KAIbC,EAJa,KAS1B,SAASC,IDpBFC,MAAMN,EAAU,WACpBO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAJ,GACJ,OAAOA,KCmBNI,MACC,SAAAJ,GACEC,EAAQD,MAiBhB,OAzBAO,qBAAU,WACRL,MACC,IAwBD,yBAAKM,MAAO,CAAEC,OAAQ,MAAOC,UAAW,OACtC,kBAAC,IAAD,CAAeC,WAAYX,EACzBY,aAAa,EACbC,aAAc,CAAEC,SAAU,GAC1BC,aAlCiC,CAAEC,cAAc,EAAMC,aAAa,EAAMC,eAAe,GAmCzFC,QAlCiC,CAAC,MAAO,OAAQ,SAAU,SAAU,UAmCrEC,kBAnBN,SAA2BC,GDQtB,IAAqBC,EA7BHC,ECsBA,QAAjBF,EAAMG,QDtBWD,ECuBVF,EAAMrB,KDtBjByB,QAAQC,IAAIH,GACPpB,MAAMN,EAAU,UAAW,CAChC8B,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBC,MAAOT,MAGRnB,MAAK,SAACJ,GACL,OAAOA,MCcJI,MAAK,SAAAC,GAAG,OAAIH,OACW,SAAjBmB,EAAMG,ODVd,SAAqBD,GAC1B,OAAOpB,MAAMN,EAAU,WAAa0B,EAAMU,QAAS,CACjDN,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBC,MAAOT,MAGRnB,MAAK,SAAAJ,GACJ,OAAOA,KCEPkC,CAAYb,EAAMrB,MACfI,MAAK,SAAAC,GAAG,OAAIH,OACgB,WAAtBmB,EAAMc,cDCOb,ECAVD,EAAMrB,KAAK,GAAGiC,QDCvB9B,MAAMN,EAAU,WAAayB,EAAY,CAC9CK,OAAQ,WAEPvB,MAAK,SAAAJ,GACJ,OAAOA,MCJJI,MAAK,SAAAC,GAAG,OAAIH,SAYb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAiBkC,MAAM,UAAUC,WAAW,aAAaC,UAAU,QAAQC,MAAM,MAAMC,cAAc,IACrG,kBAAC,IAAD,CAAiBJ,MAAM,aAAaC,WAAW,cAAcE,MAAM,QACnE,kBAAC,IAAD,CAAiBH,MAAM,cAAcC,WAAW,iBAChD,kBAAC,IAAD,CAAiBD,MAAM,WAAWC,WAAW,cAC7C,kBAAC,IAAD,CAAiBD,MAAM,UAAUE,UAAU,QAAQG,OAAO,KAAKF,MAAM,QACrE,kBAAC,IAAD,CAAiBH,MAAM,YAAYC,WAAW,YAAYK,KAAK,OAAOD,OAAO,MAAMF,MAAM,SAE3F,kBAAC,IAAD,CAAQI,SAAU,CAACC,IAAMC,IAAMC,UClDnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SDiItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtD,MAAK,SAAAuD,GACjCA,EAAaC,kB","file":"static/js/main.ff5aadd7.chunk.js","sourcesContent":["export {};\nconst baseUrl = \"http://localhost:8080/api\";\n// get\nexport function getOrders() {\n  return fetch(baseUrl + \"/orders\")\n    .then(res => res.json())\n    .then(data => {\n      return data;\n    });\n}\n\n// add\nexport function addOrder(order: any) {\n    console.log(order);\n  return fetch(baseUrl + \"/orders\", {\n    method: \"post\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      value: order\n    })\n  })\n    .then((data: any) => {\n      return data;\n    });\n}\n\n// update\nexport function updateOrder(order: any) {\n  return fetch(baseUrl + \"/orders/\" + order.OrderID, {\n    method: \"put\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      value: order\n    })\n  })\n    .then(data => {\n      return data;\n    });\n}\n\n// delete\nexport function deleteOrder(primaryKey: string) {\n  return fetch(baseUrl + \"/orders/\" + primaryKey, {\n    method: \"delete\"\n  })\n    .then(data => {\n      return data;\n    });\n}\n","import React, { useState, useEffect } from 'react';\nimport {\n  GridComponent,\n  ColumnDirective,\n  ColumnsDirective,\n  Page,\n  Inject,\n  Edit,\n  EditSettingsModel,\n  Toolbar,\n  ToolbarItems,\n} from '@syncfusion/ej2-react-grids';\nimport { getOrders, addOrder, updateOrder, deleteOrder } from './orderService';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const editOptions: EditSettingsModel = { allowEditing: true, allowAdding: true, allowDeleting: true };\n  const toolbarOptions: ToolbarItems[] = ['Add', 'Edit', 'Delete', 'Update', 'Cancel'];\n\n  const [data, setData] = useState();\n  useEffect(() => {\n    refreshGrid();\n  }, []);\n\n  function refreshGrid() {\n    getOrders()\n      .then(\n        data => {\n          setData(data);\n        }\n      );\n  }\n\n  function dataSourceChanged(state: any) {\n    if (state.action === \"add\") {\n      addOrder(state.data)\n        .then(res => refreshGrid());\n    } else if (state.action === \"edit\") {\n      updateOrder(state.data)\n        .then(res => refreshGrid());\n    } else if (state.requestType === \"delete\") {\n      deleteOrder(state.data[0].OrderID)\n        .then(res => refreshGrid());\n    }\n  }\n  return (\n    <div style={{ margin: '10%', marginTop: '5%' }}>\n      <GridComponent dataSource={data}\n        allowPaging={true}\n        pageSettings={{ pageSize: 6 }}\n        editSettings={editOptions}\n        toolbar={toolbarOptions}\n        dataSourceChanged={dataSourceChanged}\n      >\n        <ColumnsDirective>\n          <ColumnDirective field='OrderID' headerText='Invoice ID' textAlign='Right' width='100' isPrimaryKey={true} />\n          <ColumnDirective field='CustomerID' headerText='Customer ID' width='150' />\n          <ColumnDirective field='ShipCountry' headerText='Ship Country' />\n          <ColumnDirective field='ShipName' headerText='Ship Name' />\n          <ColumnDirective field='Freight' textAlign='Right' format='C2' width='150' />\n          <ColumnDirective field='OrderDate' headerText='OrderDate' type='date' format='yMd' width='150' />\n        </ColumnsDirective>\n        <Inject services={[Page, Edit, Toolbar]} />\n      </GridComponent>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}